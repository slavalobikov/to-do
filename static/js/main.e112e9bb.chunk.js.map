{"version":3,"sources":["App.module.css","Components/InputToDo/InputToDo.module.css","Redux/Reducers/ToDoReducer.js","Components/InputToDo/InputToDo.jsx","Components/ToDo/ToDo.jsx","App.js","reportWebVitals.js","Redux/Redux.jsx","index.js","Components/ToDo/ToDo.module.css"],"names":["module","exports","ADD_Z","DELETE_TODO","TOOGGLE_TODO_IS_DONE","EDIT_TODO","initialState","z","isMargin","ToDoReducer","state","action","type","Text","id","isCheck","text","isDone","isEdit","filter","item","map","u","edit","compose","connect","AddZ","props","IdNewMessage","useState","value","setValue","length","className","s","addField","onChange","e","currentTarget","placeholder","onClick","addBtn","DeleteToDO","TooggleIsDoneTrue","EditToDO","isEditValue","setIsEdit","editToDoMessage","isEditValueF","isEditF","td","ToDoElements","radioTrue","radioFalse","cn","textFalse","onBlur","autoFocus","delete","DeleteOutlined","FormOutlined","dima","App","app","main","logo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","persistConfig","key","storage","whitelist","pReducer","persistReducer","middleware","applyMiddleware","thunk","store","createStore","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e112e9bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2gBnF\",\"main\":\"App_main__1SWCl\",\"logo\":\"App_logo__NwyvL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addField\":\"InputToDo_addField__cJQVH\",\"addBtn\":\"InputToDo_addBtn__3igV9\",\"MainBlockHiden\":\"InputToDo_MainBlockHiden__3TtUQ\"};","const ADD_Z = 'ADD_Z';\r\nconst DELETE_TODO = 'DELETE_TODO';\r\nconst TOOGGLE_TODO_IS_DONE = 'TOOGGLE_TODO_IS_DONE';\r\nconst EDIT_TODO = 'EDIT_TODO';\r\n\r\nlet initialState = {\r\n    z : [\r\n/*        {\r\n            id:0,\r\n            isCheck: false,\r\n            text:'Дороу',\r\n            isDone: false,\r\n            isEdit:false,\r\n\r\n        },\r\n        {\r\n            id:1,\r\n            isCheck: true,\r\n            text: 'выучил',\r\n            isDone: true,\r\n            isEdit:false,\r\n        }*/\r\n    ],\r\n    isMargin: true,\r\n}\r\n\r\nconst ToDoReducer =(state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_Z:\r\n            let Text = {\r\n                id:action.id,\r\n                isCheck: false,\r\n                text:action.text,\r\n                isDone: false,\r\n                isEdit:false,\r\n            };\r\n            return {\r\n                ...state,\r\n                z: [...state.z, Text]\r\n            }\r\n        case DELETE_TODO:\r\n\r\n            return {\r\n                ...state,\r\n                z: state.z.filter(item => item.id !== action.id)\r\n            };\r\n        case TOOGGLE_TODO_IS_DONE:\r\n            return {\r\n                ...state,\r\n                z: state.z.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, isDone:!action.isDone}\r\n                    } else {\r\n                        return  {...u}\r\n                    }\r\n                })\r\n            };\r\n        case EDIT_TODO:\r\n            return  {\r\n                ...state,\r\n                z: state.z.map(u => {\r\n                    if (u.id === action.id) {\r\n                        return {...u, text:action.text, isEdit: !action.edit}\r\n                    } else {\r\n                        return  {...u}\r\n                    }\r\n                })\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const AddZ = (text, id) => ({type: ADD_Z, text, id })\r\nexport const DeleteToDO = (id, ) => ({type: DELETE_TODO, id});\r\nexport const TooggleIsDoneTrue = (id, isDone) => ({type: TOOGGLE_TODO_IS_DONE, id,isDone});\r\nexport const EditToDO = (id, text, edit) => ({type: EDIT_TODO, id, text, edit});\r\n\r\n\r\n\r\n\r\n\r\nexport default ToDoReducer;","import React, {useState} from 'react';\r\n\r\nimport s from \"./InputToDo.module.css\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AddZ} from \"../../Redux/Reducers/ToDoReducer\";\r\n\r\n\r\nconst InputToDo = (props) => {\r\n\r\n    const [value, setValue] = useState('');\r\n\r\n    let IdNewMessage;\r\n\r\n    if (!props.z[0]) {\r\n        IdNewMessage = 1;\r\n    } else {\r\n        IdNewMessage = props.z[props.z.length - 1].id + 1;\r\n    }\r\n\r\n    const addToDo = () => {\r\n\r\n        if (!value) {\r\n            return\r\n        }\r\n\r\n        props.AddZ(value, IdNewMessage, IdNewMessage );\r\n        setValue('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n               <div  className={s.addField}>\r\n                    <input type=\"text\"\r\n                           value={value}\r\n                           onChange={(e) => {setValue(e.currentTarget.value)}}\r\n                           placeholder={'Введите свою задачу'}\r\n\r\n                    />\r\n                    <button onClick={() => {addToDo()}}  className={s.addBtn}>+</button>\r\n                </div>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        z: state.ToDoReducer.z,\r\n\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        AddZ,\r\n    }),\r\n) (InputToDo);\r\n\r\n","/*\r\n/!*\r\n\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport cn from 'classnames';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport {DeleteOutlined, FormOutlined} from '@ant-design/icons';\r\n\r\n\r\n\r\nimport s from './ToDo.module.css'\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n/!*\r\n{id:0, isCheck: false, text:'Дороу', isDone: false, isEdit:false, order: 1},\r\n*!/\r\n\r\nconst initialDataF = (props) => {\r\n\r\n    console.log('dima', props)\r\n    return {\r\n\r\n        tasks: {\r\n            'task-1': {id: 'task-1', text: 'Take out the grabage', isDone: false, isEdit: false,},\r\n            'task-2': {id: 'task-2', text: 'DimaAMDa', isDone: true, isEdit: false,},\r\n            'task-3': {id: 'task-3', text: 'Henesi', isDone: false, isEdit: true,},\r\n            'task-4': {id: 'task-4', text: 'GRAD', isDone: false, isEdit: false,},\r\n        },\r\n        columns: {\r\n            'column-1': {\r\n                id: 'column-1',\r\n                taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\r\n            }\r\n        },\r\n        columnOrder:[ 'column-1']\r\n    }\r\n}\r\n\r\n/!*\r\nconst initialData = {\r\n    tasks: {\r\n        'task-1': {id: 'task-1', text: 'Take out the grabage', isDone: false, isEdit: false,},\r\n        'task-2': {id: 'task-2', text: 'DimaAMDa', isDone: true, isEdit: false,},\r\n        'task-3': {id: 'task-3', text: 'Henesi', isDone: false, isEdit: true,},\r\n        'task-4': {id: 'task-4', text: 'GRAD', isDone: false, isEdit: false,},\r\n    },\r\n    columns: {\r\n        'column-1': {\r\n            id: 'column-1',\r\n            taskIds: ['task-1', 'task-2', 'task-3', 'task-4'],\r\n        }\r\n    },\r\n    columnOrder:[ 'column-1']\r\n}\r\n*!/\r\n\r\nconst ContainerTwo = styled.div`\r\n  margin-bottom: 8px;\r\n  background-color: ${props => (props.isDragging ? 'lightGreen' : 'white')};\r\n`;\r\n\r\nclass Task extends React.Component {\r\n    render() {\r\n\r\n        return (\r\n            <Draggable draggableId={this.props.task.id} index={this.props.index}>\r\n                {(provided, snapshot) => (\r\n                    <ContainerTwo\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                        isDragging={snapshot.isDragging}\r\n                    >\r\n\r\n                        <div className={s.item}>\r\n                            {this.props.task.isDone\r\n                                ? <button  className={s.radioTrue} ></button>\r\n                                : <button  className={s.radioFalse}></button>}\r\n                            <span className={cn({\r\n                                [s.textFalse]: this.props.task.isDone === true\r\n                            })}>\r\n\r\n                                {this.props.task.isEdit\r\n                                && <input type=\"text\"\r\n/!*                                    /!*onBlur={() => { editToDoMessage(td.id, isEditValue, td.isEdit, td.text)}}*!/\r\n                                                        onChange={(e) => {setIsEdit(e.currentTarget.value)}}\r\n                                                        value={td.text || isEditValue} autoFocus={true} *!/\r\n\r\n                                                        />}\r\n                                {!this.props.task.isEdit && this.props.task.text}\r\n\r\n                            </span>\r\n                            <span  className={s.delete}><DeleteOutlined /></span>\r\n                            <span  className={s.delete}><FormOutlined /></span>\r\n                        </div>\r\n                    </ContainerTwo>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}\r\n\r\nclass Column extends React.Component {\r\n    render() {\r\n        return (\r\n                <Droppable droppableId={this.props.column.id}>\r\n                    {(provided, snapshot) =>\r\n                        <TaskList\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                            isDraggingOver={snapshot.isDraggingOver}\r\n                        >\r\n                            {this.props.tasks.map((task, index) => (\r\n                                <Task key={task.id} task={task} index={index} />\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </TaskList>\r\n                    }\r\n                </Droppable>\r\n        );\r\n    }\r\n}\r\n\r\nconst Container = styled.div`\r\n\r\n`;\r\n\r\nconst TaskList = styled.div`\r\n\r\n  transition: background-color 0.2s ease;\r\n  background-color: ${props => (props.isDraggingOver ? 'skyblue' : 'white')};\r\n`;\r\n\r\n\r\nclass ToDo extends React.Component {\r\n    state = initialDataF();\r\n\r\n    onDragStart = () => {\r\n        document.body.style.color = 'orange';\r\n        document.body.style.transition = 'background-color 0.2s ease';\r\n    }\r\n\r\n    onDragUpdate = update => {\r\n        const { destination } = update;\r\n        const opacity = destination\r\n            ? destination.index /Object.keys(this.state.tasks).length\r\n            : 0;\r\n        document.body.style.backgroundColor = `rgba(153, 141, 217, ${opacity})`\r\n    }\r\n\r\n    onDragEnd = result => {\r\n\r\n        document.body.style.color = 'inherit';\r\n        document.body.style.backgroundColor = 'inherit';\r\n\r\n        const {destination, source, draggableId } = result;\r\n\r\n        if(!destination) {\r\n            return;\r\n        }\r\n\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) {\r\n            return;\r\n        }\r\n\r\n        const column = this.state.columns[source.droppableId];\r\n        const newTaskIds = Array.from(column.taskIds);\r\n        newTaskIds.splice(source.index, 1);\r\n        newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n        const newColumn = {\r\n            ...column,\r\n            taskIds: newTaskIds,\r\n        };\r\n\r\n        const newState = {\r\n            ...this.state,\r\n            columns: {\r\n                ...this.state.columns,\r\n                [newColumn.id]: newColumn,\r\n            },\r\n        };\r\n\r\n        this.setState(newState);\r\n    };\r\n    render() {\r\n        return (\r\n            <DragDropContext\r\n                onDragEnd={this.onDragEnd}\r\n            >\r\n                {this.state.columnOrder.map((columnId) => {\r\n                    const column = this.state.columns[columnId];\r\n                    const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\r\n\r\n                    return <Column key={column.id} column={column} tasks={tasks} />;\r\n                })}\r\n            </DragDropContext>\r\n        )\r\n    }\r\n}\r\n\r\n/!*export default ToDo;*!/\r\n/!*let mapStateToProps = (state) => {\r\n    return {\r\n        z: state.ToDoReducer.z,\r\n\r\n    }\r\n};*!/\r\n\r\n/!* compose(\r\n    connect(mapStateToProps, {\r\n\r\n    }),\r\n)(initialDataF)*!/\r\n\r\nexport default ToDo;\r\n\r\n*!/\r\n\r\n\r\nimport React, {useCallback, useEffect, useMemo, useState} from 'react';\r\nimport {range, inRange} from 'lodash';\r\nimport styled from 'styled-components';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport s from './ToDo.module.css'\r\nimport cn from 'classnames'\r\nimport {DeleteOutlined, FormOutlined, SaveOutlined} from '@ant-design/icons';\r\n\r\nconst POSITION = {x: 0, y: 0};\r\n\r\nconst Draggable = ({children, id, onDrag, onDragEnd}) => {\r\n    const [state, setState] = useState({\r\n        isDragging: false,\r\n        origin: POSITION,\r\n        translation: POSITION\r\n    });\r\n\r\n    const handleMouseDown = useCallback(({clientX, clientY}) => {\r\n        setState(state => ({\r\n            ...state,\r\n            isDragging: true,\r\n            origin: {x: clientX, y: clientY}\r\n        }));\r\n    }, []);\r\n\r\n    const handleMouseMove = useCallback(({clientX, clientY}) => {\r\n        const translation = {x: clientX - state.origin.x, y: clientY - state.origin.y};\r\n\r\n        setState(state => ({\r\n            ...state,\r\n            translation\r\n        }));\r\n\r\n        onDrag({translation, id});\r\n    }, [state.origin, onDrag, id]);\r\n\r\n    const handleMouseUp = useCallback(() => {\r\n        setState(state => ({\r\n            ...state,\r\n            isDragging: false\r\n        }));\r\n\r\n        onDragEnd();\r\n    }, [onDragEnd]);\r\n\r\n    useEffect(() => {\r\n        if (state.isDragging) {\r\n            window.addEventListener('mousemove', handleMouseMove);\r\n            window.addEventListener('mouseup', handleMouseUp);\r\n        } else {\r\n            window.removeEventListener('mousemove', handleMouseMove);\r\n            window.removeEventListener('mouseup', handleMouseUp);\r\n\r\n            setState(state => ({...state, translation: {x: 0, y: 0}}));\r\n        }\r\n    }, [state.isDragging, handleMouseMove, handleMouseUp]);\r\n\r\n    const styles = useMemo(() => ({\r\n        cursor: state.isDragging ? '-webkit-grabbing' : '-webkit-grab',\r\n        transform: `translate(${state.translation.x}px, ${state.translation.y}px)`,\r\n        transition: state.isDragging ? 'none' : 'transform 500ms',\r\n        zIndex: state.isDragging ? 2 : 1,\r\n        position: state.isDragging ? 'absolute' : 'relative'\r\n    }), [state.isDragging, state.translation]);\r\n\r\n    return (\r\n        <div style={styles} onMouseDown={handleMouseDown}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\nconst HEIGHT = 46;\r\n\r\nconst ToDo = (props) => {\r\n    const items = props.z\r\n    const [state, setState] = useState({\r\n        order: items,\r\n        dragOrder: items, // items order while dragging\r\n        draggedIndex: null\r\n    });\r\n\r\n    const handleDrag = useCallback(({translation, id}) => {\r\n        const delta = Math.round(translation.y / HEIGHT);\r\n        const index = state.order.indexOf(id);\r\n        const dragOrder = state.order.filter(index => index !== id);\r\n\r\n        if (!inRange(index + delta, 0, items.length)) {\r\n            return;\r\n        }\r\n\r\n        dragOrder.splice(index + delta, 0, id);\r\n\r\n        setState(state => ({\r\n            ...state,\r\n            draggedIndex: id,\r\n            dragOrder\r\n        }));\r\n    }, [state.order, items.length]);\r\n\r\n    const handleDragEnd = useCallback(() => {\r\n        setState(state => ({\r\n            ...state,\r\n            order: state.dragOrder,\r\n            draggedIndex: null\r\n        }));\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {items.map(index => {\r\n                const isDragging = state.draggedIndex === index;\r\n                const top = state.dragOrder.indexOf(index) * (HEIGHT );\r\n                const draggedTop = state.order.indexOf(index) * (HEIGHT);\r\n\r\n                return (\r\n                    <Draggable\r\n                        key={index.id}\r\n                        id={index}\r\n                        onDrag={handleDrag}\r\n                        onDragEnd={handleDragEnd}\r\n                    >\r\n                        <Rect\r\n                            isDragging={isDragging}\r\n                            top={isDragging ? draggedTop : top}\r\n                        >\r\n                            <div className={cn(s.item, {\r\n\r\n                            })}>\r\n\r\n\r\n\r\n                                {index.isDone\r\n                                    ? <button  className={s.radioTrue} ></button>\r\n                                    : <button  className={s.radioFalse}></button>}\r\n                                <span className={cn({\r\n                                    [s.textFalse]: index.isDone === true\r\n                                })}>\r\n                    {index.isEdit\r\n                    && <input type=\"text\"\r\n                               />}\r\n                  {!index.isEdit && index.text}\r\n                </span>\r\n\r\n                                <span  className={s.delete}>{/!*<CloseOutlined  />*!/}<DeleteOutlined /></span>\r\n                                <span  className={s.delete}>{/!*<CloseOutlined  />*!/}<FormOutlined /></span>\r\n\r\n\r\n                            </div>\r\n                        </Rect>\r\n                    </Draggable>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst Rect = styled.div.attrs(props => ({\r\n    style: {\r\n        transition: props.isDragging ? 'none' : 'all 500ms'\r\n    }\r\n}))`\r\n  width: 600px;\r\n  position: absolute;\r\n  top: ${( {top} ) => top }px;\r\n\r\n\r\n\r\n\r\n`;\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        z: state.ToDoReducer.z,\r\n\r\n\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n\r\n    }),\r\n) (ToDo);\r\n*/\r\n\r\nimport React, {useState} from 'react';\r\nimport s from './ToDo.module.css'\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport cn from 'classnames'\r\nimport {DeleteOutlined, FormOutlined} from '@ant-design/icons';\r\nimport {DeleteToDO, EditToDO, TooggleIsDoneTrue} from \"../../Redux/Reducers/ToDoReducer\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ToDo = (props) => {\r\n    const [isEditValue, setIsEdit] = useState('');\r\n\r\n    const editToDoMessage = (id, isEditValueF, isEditF, td) => {\r\n        if (!isEditValue && td === '' ) {\r\n            return\r\n        }\r\n\r\n        props.EditToDO(id, isEditValueF, isEditF);\r\n        setIsEdit(td);\r\n\r\n\r\n\r\n    };\r\n\r\n    let ToDoElements = props.z.map(td => (\r\n        <div\r\n            key={td.id}>\r\n            <div className={s.item}>\r\n                {td.isDone\r\n                    ? <button onClick={() => {props.TooggleIsDoneTrue(td.id, td.isDone)}} className={s.radioTrue} ></button>\r\n                    : <button onClick={() => {props.TooggleIsDoneTrue(td.id, td.isDone)}} className={s.radioFalse}></button>}\r\n                <span className={cn({\r\n                    [s.textFalse]: td.isDone === true\r\n                })}>\r\n                    {td.isEdit\r\n                    && <input type=\"text\"\r\n                              onBlur={() => { editToDoMessage(td.id, isEditValue, td.isEdit, td.text)}}\r\n                              onChange={(e) => {setIsEdit(e.currentTarget.value)}}\r\n                              value={td.text || isEditValue} autoFocus={true}\r\n                               />}\r\n                    {!td.isEdit && td.text}\r\n\r\n                </span>\r\n                <span onClick={() => { props.DeleteToDO(td.id)}} className={s.delete}><DeleteOutlined /></span>\r\n                <span onClick={() => { editToDoMessage(td.id, isEditValue, td.isEdit, td.text)} }  className={s.delete}><FormOutlined /></span>\r\n            </div>\r\n        </div>\r\n    ));\r\n\r\n    return (\r\n        <div className={s.dima}>\r\n            {ToDoElements}\r\n        </div>\r\n    );\r\n};\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        z: state.ToDoReducer.z,\r\n\r\n\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        DeleteToDO,\r\n        TooggleIsDoneTrue,\r\n        EditToDO\r\n    }),\r\n) (ToDo);","import s from  './App.module.css';\nimport InputToDo from \"./Components/InputToDo/InputToDo\";\nimport ToDo from \"./Components/ToDo/ToDo\";\n\nfunction App() {\n  return (\n      <div className={s.app}>\n          <div className={s.main}>\n              <div className={s.logo}>\n                  <span>Список задач</span>\n              </div>\n              <InputToDo />\n              <ToDo />\n          </div>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport ToDoReducer from \"./Reducers/ToDoReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    ToDoReducer,\r\n});\r\n\r\nconst persistConfig = {\r\n    key: 'toDo',\r\n    storage: storage,\r\n    whitelist: ['ToDoReducer'] // which reducer want to store\r\n};\r\nconst pReducer = persistReducer(persistConfig, reducers);\r\nconst middleware = applyMiddleware(thunk);\r\nconst store = createStore(pReducer, middleware);\r\nconst persistor = persistStore(store);\r\nexport { persistor, store };\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {store} from \"./Redux/Redux\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"numberToDo\":\"ToDo_numberToDo__2vADD\",\"delete\":\"ToDo_delete__1gObl\",\"item\":\"ToDo_item__10Wb1\",\"marginTop\":\"ToDo_marginTop__N0BK_\",\"radioFalse\":\"ToDo_radioFalse__j-jOF\",\"radioTrue\":\"ToDo_radioTrue__elsrk\",\"textFalse\":\"ToDo_textFalse__1Q98I\",\"DeleteAll\":\"ToDo_DeleteAll__1qG6q\",\"MainBlock\":\"ToDo_MainBlock__3BjNg\",\"SaveAll\":\"ToDo_SaveAll__SRi2A\",\"PreloaderBlock\":\"ToDo_PreloaderBlock__1GTyO\",\"preloader\":\"ToDo_preloader__15hIZ\",\"MainBlockHiden\":\"ToDo_MainBlockHiden__1VTUy\",\"mainPopup\":\"ToDo_mainPopup__3h1sL\",\"popup\":\"ToDo_popup__3pFkp\",\"info\":\"ToDo_info__1bzwv\",\"UpdateAll\":\"ToDo_UpdateAll__VT6wv\"};"],"sourceRoot":""}